[{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":" Introduction # Static sites are fast, secure, and easy to host for free on GitHub Pages. Hugo is one of the fastest static site generators, and Blowfish is a powerful, lightweight theme for Hugo.\nIn this quick start guide, we will:\nSetup Hugo and add the Blowfish theme Setup the basic configuration of the site Create a new post and deploy locally Add a comment system (Giscus) Deploy the site to GitHub Pages Note: this guide is tested on macOS.\n1. Install Hugo and Git # First, install Hugo and Git based on your platform.\nmacOS # Open the terminal and run the following commands to install hugo and git using brew:\nbrew install hugo brew install git Other Platforms # You can find detailed installation instructions for your platform in the Hugo docs and Git docs.\nVerify the Installation # Verify by running the following command:\nhugo version ⚠️ Make sure you are using Hugo version 0.87.0 or later as the theme takes advantage of some of the latest Hugo features.\n2. Create your Hugo site # We will create a new Hugo site named \u0026lt;your-site-name\u0026gt;, e.g., my-site. This directory will be used to store your site\u0026rsquo;s code.\nCreate a new Hugo site # Run the following commands to create a new Hugo site and initialize a git repository:\nhugo new site \u0026lt;your-site-name\u0026gt; cd \u0026lt;your-site-name\u0026gt; Directory structure # ⚠️ From now on, we will assume that the working directory is \u0026lt;your-site-name\u0026gt;.\nThe directory structure should look like this:\n\u0026lt;your-site-name\u0026gt;/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── hugo.toml ├── i18n/ ├── layouts/ ├── static/ └── themes/ The explanation of the directories is in the Hugo docs.\nI know there are a lot of directories, but don\u0026rsquo;t worry, in this guide, we will only focus on the following directories:\narchetypes/: Contains templates for new content. Refer to Hugo docs. config/: Contains the configuration files. Refer to Hugo docs \u0026amp; Blowfish docs. content/: Contains the content of the site, e.g., Blog posts, About page, etc. Refer to Hugo docs \u0026amp; Blowfish docs. themes/: Contains the themes of the site. You can find other themes in Hugo Themes. 3. Add the Blowfish Theme # Blowfish provides a helper tool to configure everything quickly but I refer to adding the theme manually.\n⚠️ Make sure the working directory is \u0026lt;your-site-name\u0026gt; before running the following commands.\nInitialize Git and add the Blowfish theme # git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Copy the configuration files # We will use the setting provided by Blowfish, so we delete the current one created by hugo and copy the ones from the theme.\nrm -rf hugo.toml cp -r themes/blowfish/config ./ Run the site locally # Run the following command to run the site locally:\nhugo server -D # -D flag to run the site in draft mode From the terminal, you should see the local site, e.g., http://localhost:1313, open it in your browser. You should see the default Blowfish homepage like this:\nNow, we are ready to configure the site in the next section.\n⚠️ Keep the terminal running the hugo server -D command. It will automatically update the site when you make changes (after saving the file). If you close the terminal, you need to run the command again to start the server.\n4. Configure the Site and Homepage # The directory structure of config/ should look like this:\n\u0026lt;your-site-name\u0026gt;/ └──config/ └── _default/ ├── hugo.toml ├── languages.en.toml ├── markup.toml ├── menus.en.toml ├── module.toml └── params.toml Configure the Site # Open config/_default/hugo.toml and modify these lines to use the Blowfish theme and set the base URL:\ntheme = \u0026#34;blowfish\u0026#34; # UNCOMMENT THIS LINE AND CHANGE THIS TO \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://\u0026lt;your-github-username\u0026gt;.github.io\u0026#34; # CHANGE THIS TO YOUR DOMAIN according to your GitHub account name, e.g., `https://khoa-nt.github.io` is the domain for the GitHub account name \u0026#34;khoa-nt\u0026#34; Refer to Blowfish site-configuration for more details.\nConfigure the Homepage # Open config/_default/languages.en.toml and modify these lines to set the title and author information:\ntitle = \u0026#34;My Hugo Site\u0026#34; # Title of your site # Uncomment this section and change the values to your own [params.author] name = \u0026#34;My Name\u0026#34; # Name of the author image = \u0026#34;img/author.jpg\u0026#34; # Image should be placed in the `assets/` folder, e.g., `\u0026lt;your-site-name\u0026gt;/assets/img/author.jpg` Add more details # Create content/_index.md and modify the content to your own. For example, I refer to the content looks like this:\n--- title: \u0026#34;Welcome to my website!\u0026#34; # For meta data description: \u0026#34;This is a content of the homepage.\u0026#34; # For meta data ### Ref: ### + Parameters: https://blowfish.page/docs/front-matter/ --- Welcome! The website is still under construction. # The text will be displayed in the homepage below the homepage image You should see the homepage has been updated with your information:\nRefer to Blowfish Language Configuration for more details.\nConfigure the Menu # Open config/_default/menus.en.toml and uncomment these lines to set the menu structure:\n[[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; ### this page will link to the `posts` directory in `content/`, e.g., `content/posts/` weight = 10 You should see the menu has been updated with the Blog section on the top right:\n5. Create a post Template # We will create a post template in archetypes/ to use for new posts. Feel free to change the template to your own. I refer to the post template looks like this:\narchetypes/ ├── default.md # default template for all posts of hugo (Already exists) └── posts/ # template for new posts (We will create this) ├── attachments/ # attachments for the post ├── images/ # images for the post └── index.md # template for new posts Create empty folders and files # Open another terminal, go to \u0026lt;your-site-name\u0026gt; directory and run the following commands:\nmkdir -p archetypes/posts/images archetypes/posts/attachments touch archetypes/posts/index.md touch archetypes/posts/images/.gitkeep touch archetypes/posts/attachments/.gitkeep ⚠️ We will use this terminal to run the commands from now on.\nModify the template # Open archetypes/posts/index.md and modify the template to your own. I refer to the template looks like this:\n--- ### Required / basic title: \u0026#39;{{ replace .File.ContentBaseName `-` ` ` | title }}\u0026#39; # auto-generate title from folder name date: \u0026#39;{{ .Date }}\u0026#39; # sets the creation date ### Draft / publication control draft: true # mark new posts as drafts by default ### SEO / metadata description: \u0026#34;\u0026#34; # short description or excerpt for meta tags ### Feature image / hero # featureimage: \u0026#34;images/cover.jpg\u0026#34; # path to a feature image (optional) # featureimagecaption: \u0026#34;An illustrative cover\u0026#34; # caption for the feature image # showHero: true # whether to show the hero image ### Content display controls # showDate: true # show the date in the article showReadingTime: true # show estimated reading time # showTableOfContents: false # whether to show a TOC in the article ### Taxonomy fields tags: [] # tags for this blog post # series: [] # series name(s) if you group posts # series_order: 1 # ordering in series, if used ### Comments / sharing ### Available values are: “bluesky”, “email”, “facebook”, “line”, “linkedin”, “mastodon”, “pinterest”, “reddit”, “telegram”, “twitter”, and “whatsapp”. # showComments: false # whether to include comments section # sharingLinks: [\u0026#34;twitter\u0026#34;, \u0026#34;linkedin\u0026#34;, \u0026#34;facebook\u0026#34;] # which social links to show. ### Edit link (if your config enables showEdit) # editURL: \u0026#34;\u0026#34; # base URL for “edit this page” # editAppendPath: true # whether to append the page path to editURL --- Start writing your blog post in Markdown here. Use images placed in the `images/` folder next to this file, e.g.: ![Caption](images/photo1.jpg) 6. Create Your First Post # We will create a new post in content/posts/ to test the post template.\nhugo new posts/my-first-post ⚠️ You may see the warning message like this:\nWARN Module \u0026#34;blowfish\u0026#34; is not compatible with this Hugo version ... There is no need to worry about this. Everything is working fine.\nOn your browser, you should see the post has been created by clicking the Blog section in the menu:\nOpen the post and you should see the post has been created with the default template.\n7. Deploy to GitHub Pages # Creat gitIgnore # Create \u0026lt;your-site-name\u0026gt;/.gitignore file and add the following content:\n### Node.js dependencies directory node_modules ### Hugo build lock file .hugo_build.lock ### OS generated files ### macOS system file for folder display options .DS_Store ### Alternative macOS system file .DS_Store? ### macOS resource fork files (commented out) # ._* ### macOS Spotlight search index .Spotlight-V100 ### macOS trash folder .Trashes ### Hugo ### Hugo generated static site output directory public Create a repo on GitHub # Create a new repository on your GitHub account with the name \u0026lt;your-github-username\u0026gt;.github.io.\n⚠️ Uncheck the Initialize this repository with a README checkbox to avoid the README.md file being created.\nAdd and push your site to the repo # Run the following commands to add and push your site to the repo:\ngit branch -M main # set the branch to main git remote add origin https://github.com/\u0026lt;your-github-username\u0026gt;/\u0026lt;your-github-username\u0026gt;.github.io.git git add -A # add all files to the staging area git commit -m \u0026#34;Initial commit for Hugo + Blowfish site\u0026#34; # commit the changes git push -u origin main # push the changes to the remote repository Add GitHub Action # Create .github/workflows/gh-pages.yml file and add the following content:\n# .github/workflows/gh-pages.yml name: GitHub Pages permissions: contents: write on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-24.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public On your online repo, you should do the following steps:\nGo to Settings Go to Pages Set the Branch to gh-pages and click Save Go to your site https://\u0026lt;your-github-username\u0026gt;.github.io, you should see the site is deployed. For example, https://khoa-nt.github.io is the domain for the GitHub account name \u0026ldquo;khoa-nt\u0026rdquo;.\n8. Add a Comment System (Giscus) # We will add a comment system to the site using Giscus.\nEnable Giscus # Go to giscus app and enable it only for your site repository.\nConfigure Giscus # Go to Giscus and follow the instructions to get the code: In the end, you should see the html \u0026lt;script\u0026gt; looks like this: Add the html \u0026lt;script\u0026gt; to the site # Create \u0026lt;your-site-name\u0026gt;/layouts/partials/comments.html, add the html \u0026lt;div\u0026gt; and your html \u0026lt;script\u0026gt; to the file.\n\u0026lt;!-- Add class `giscus` so that Giscus can be displayed --\u0026gt; \u0026lt;div class=\u0026#34;giscus\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- PUT YOUR HTML `\u0026lt;script\u0026gt;` HERE --\u0026gt; Refer to Blowfish Comments Configuration for more details.\nNow comments appear under each post.\n9. Wrap-Up and Next Steps # 🎉 Congratulations! You now have a live Hugo + Blowfish website hosted for free.\nNext ideas:\nCustomize colors and fonts. Add your publications page. Write blog posts from Markdown or Jupyter notebooks. 10. Reference # Blowfish Documentation Hugo Documentation Giscus Please leave your feedback or questions in the comments section below.\nThank you for reading!\n","date":"6 October 2025","externalUrl":null,"permalink":"/posts/hugo-blowfish-quickstart/","section":"Posts","summary":"","title":"Build a Hugo Website with the Blowfish Theme (Quick Start Guide)","type":"posts"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/quickstart/","section":"Tags","summary":"","title":"Quickstart","type":"tags"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"6 October 2025","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"Welcome to my website!\nThe website is still under construction.\n","date":"6 October 2025","externalUrl":null,"permalink":"/","section":"Welcome to my website!","summary":"","title":"Welcome to my website!","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]